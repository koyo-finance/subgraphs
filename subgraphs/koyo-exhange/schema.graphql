type Koyo @entity {
	id: ID!

	" Number of pools registered "
	poolCount: Int!
	" List of registered pools "
	pools: [Pool!] @derivedFrom(field: "vault")

	totalLiquidity: BigDecimal!
	totalSwapCount: BigInt!
	totalSwapVolume: BigDecimal!
	totalSwapFee: BigDecimal!

	" Address of the Kōyō vault "
	address: Bytes!
}

type KoyoSnapshot @entity {
	id: ID!
	vault: Koyo!
	timestamp: Int!

	poolCount: Int!

	totalLiquidity: BigDecimal!
	totalSwapCount: BigInt!
	totalSwapVolume: BigDecimal!
	totalSwapFee: BigDecimal!

	address: Bytes!
}

type Account @entity {
	id: ID!

	address: Bytes!

	internalBalances: [AccountInternalBalance!] @derivedFrom(field: "account")
}

type AccountInternalBalance @entity {
	id: ID!
	account: Account
	token: Bytes!
	balance: BigDecimal!
	balanceRaw: BigInt!
}

type Token @entity {
	id: ID!
	symbol: String
	name: String
	decimals: Int!
	address: String!
	totalBalanceUSD: BigDecimal! # total balance of tokens across balancer
	totalBalanceNotional: BigDecimal!
	totalVolumeUSD: BigDecimal! # total volume in fiat (usd)
	totalVolumeNotional: BigDecimal!
	totalSwapCount: BigInt!
	latestPrice: LatestPrice # latest price of token, updated when pool liquidity changes
}

type TokenSnapshot @entity {
	id: ID! # token address + dayId
	token: Token!
	timestamp: Int! # timestamp representing the start of day in UTC
	totalBalanceUSD: BigDecimal! # total balance of tokens across balancer
	totalBalanceNotional: BigDecimal! # underlying asset balance
	totalVolumeUSD: BigDecimal! # amount of volume the token has moved on this day
	totalVolumeNotional: BigDecimal! # underyling asset volume
	totalSwapCount: BigInt!
}

type PoolSnapshot @entity {
	id: ID!
	pool: Pool!
	amounts: [BigDecimal!]!
	totalShares: BigDecimal!
	swapVolume: BigDecimal!
	swapFees: BigDecimal!
	timestamp: Int!

	totalSwapVolume: BigDecimal!
	totalSwapFee: BigDecimal!
	totalLiquidity: BigDecimal!
	swapsCount: BigInt!
	holdersCount: BigInt!
}

type TradePair @entity {
	" Token Address - Token Address "
	id: ID!
	token0: Token!
	token1: Token!
	totalSwapVolume: BigDecimal!
	totalSwapFee: BigDecimal!
}

type LatestPrice @entity {
	id: ID!
	asset: Bytes!
	pricingAsset: Bytes! # address of stable asset
	poolId: Pool! # last pool which set price
	price: BigDecimal! # all the latest prices
	priceUSD: BigDecimal!
	block: BigInt! # last block that prices were updated
}

type TokenPrice @entity {
	id: ID! # address of token + address of stablecoin-poolId
	poolId: Pool!
	asset: Bytes!
	amount: BigDecimal!
	" Address of stable asset "
	pricingAsset: Bytes!
	price: BigDecimal!
	priceUSD: BigDecimal!
	block: BigInt!
	timestamp: Int!
}

enum InvestType {
	Join
	Exit
}

type JoinExit @entity {
	id: ID!
	type: InvestType!
	sender: Bytes!
	amounts: [BigDecimal!]!
	pool: Pool!
	account: Account!
	timestamp: Int!
	valueUSD: BigDecimal!
	tx: Bytes!
}

type Pool @entity {
	id: ID!
	address: Bytes!
	poolType: String
	factory: Bytes
	strategyType: Int!
	symbol: String
	name: String
	swapEnabled: Boolean!
	swapFee: BigDecimal!
	owner: Account

	totalWeight: BigDecimal
	totalSwapVolume: BigDecimal!
	totalSwapFee: BigDecimal!
	totalLiquidity: BigDecimal!
	totalShares: BigDecimal!

	totalSharesRaw: BigInt!

	createTime: Int!
	swapsCount: BigInt!
	holdersCount: BigInt!

	vault: Koyo!
	tx: Bytes

	tokensList: [Bytes!]!

	# StablePool Only
	amp: BigInt

	tokens: [PoolToken!] @derivedFrom(field: "poolId")
	swaps: [Swap!] @derivedFrom(field: "poolId")
	shares: [PoolShare!] @derivedFrom(field: "poolId")
	historicalValues: [PoolHistoricalLiquidity!] @derivedFrom(field: "poolId")
}

type PoolHistoricalLiquidity @entity {
	id: ID!
	poolId: Pool!
	poolTotalShares: BigDecimal!
	poolLiquidity: BigDecimal! # total value, priced in the stable asset - ie USD
	poolShareValue: BigDecimal!
	pricingAsset: Bytes! # address of stable asset
	block: BigInt!
}

type PoolToken @entity {
	id: ID!
	poolId: Pool!
	token: Token!
	symbol: String!
	name: String!
	decimals: Int!
	address: String!
	priceRate: BigDecimal!
	balance: BigDecimal!
	balanceRaw: BigInt!
	invested: BigDecimal!

	# WeightedPool Only
	weight: BigDecimal
}

type PoolShare @entity {
	id: ID!
	account: Account!
	poolId: Pool!
	balance: BigDecimal!
}

type AmpUpdate @entity {
	id: ID!
	poolId: Pool!
	scheduledTimestamp: Int!
	startTimestamp: BigInt!
	endTimestamp: BigInt!
	startAmp: BigInt!
	endAmp: BigInt!
}

type Swap @entity {
	id: ID!
	caller: Bytes!
	tokenIn: Bytes!
	tokenInSym: String!
	tokenOut: Bytes!
	tokenOutSym: String!
	tokenAmountIn: BigDecimal!
	tokenAmountOut: BigDecimal!
	# valueUSD: BigDecimal!
	poolId: Pool!
	account: Account!
	timestamp: Int!
	tx: Bytes!
	valueUSD: BigDecimal!
}
